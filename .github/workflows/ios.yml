name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # 1Ô∏è‚É£  CHECK OUT YOUR CODE
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£  INSTALL .NET 8.0.301
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.301

      # 3Ô∏è‚É£  SHOW RUNNER / XCODE / DOTNET INFO
      - name: Env / tool versions
        run: |
          sw_vers
          xcodebuild -version | head -1
          dotnet --info

      # 4Ô∏è‚É£  DECODE & SAVE SIGNING FILES
      - name: Restore signing files
        run: |
          echo "${{ secrets.P12_BASE64 }}"     | base64 --decode > signing.p12
          echo "${{ secrets.PROFILE_BASE64 }}" | base64 --decode > app.mobileprovision
          echo "${{ secrets.ASC_KEY_BASE64 }}"  | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      # 5Ô∏è‚É£  IMPORT .p12 INTO A TEMP KEYCHAIN
      - id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      # 6Ô∏è‚É£  INSTALL .mobileprovision
      - id: install-profile
        run: |
          security cms -D -i app.mobileprovision -o tmp.plist
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' tmp.plist)
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"
          echo "UUID=$uuid" >> "$GITHUB_ENV"

      # 7Ô∏è‚É£  CACHE NuGet PACKAGES & WORKLOADS
      - uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/workloads
            ~/.dotnet/tools
          key: |
            nuget-workloads-${{ runner.os }}-lockfile-${{ hashFiles('**/global.json','**/*.csproj') }}
          restore-keys: |
            nuget-workloads-${{ runner.os }}-lockfile-

      # 8Ô∏è‚É£  RESTORE ALL WORKLOADS (sees global.json pin to maui-ios@17.4)
      - run: dotnet workload restore
        name: Restore .NET workloads

      # 9Ô∏è‚É£  PIN & INSTALL EXACTLY maui-ios@17.4.0
      - run: dotnet workload install maui-ios --version 17.4.0
        name: Pin & install maui-ios

      # üîü  RESTORE ONLY iOS ASSETS (skip Android)
      - name: Restore iOS assets only
        run: |
          dotnet restore ./AlanJayApp.csproj \
            -p:TargetFramework=net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64

      # 1Ô∏è‚É£1Ô∏è‚É£  PUBLISH .ipa (signed, disables trimming & linking)

      - name: Publish .NET MAUI for iOS
        run: |
          dotnet publish ./AlanJayApp.csproj \
            --configuration Release \
            --framework net8.0-ios \
            --runtime ios-arm64 \
            --output out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:MtouchLink=None
      - name: List publish output
        run: ls -l out

      # 1Ô∏è‚É£2Ô∏è‚É£  INSTALL RUBY & FASTLANE
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # 1Ô∏è‚É£3Ô∏è‚É£  DELIVER to TestFlight
      - name: Deliver to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY_KEY:       ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT:   ${{ secrets.ASC_KEY_BASE64 }}
        run: |
          gem install fastlane
          fastlane deliver \
            --ipa out/AlanJayApp.ipa \
            --api_key_path asc_key.p8 \
            --issuer_id ${{ secrets.ASC_ISSUER_ID }} \
            --key_id    ${{ secrets.ASC_KEY_ID }}
