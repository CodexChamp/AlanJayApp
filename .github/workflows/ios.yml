# .github/workflows/ios.yml
name: Build & Upload iOS

on:
  push:
    branches: [ master ]

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # ─────────────────────────────────────────────────────────────────────────
      # 1️⃣  Show runner info (optional, just for debugging)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Env / tool versions 🔍
        run: |
          sw_vers
          uname -a
          which openssl && openssl version
          echo "Shell: $SHELL"

      # ─────────────────────────────────────────────────────────────────────────
      # 2️⃣  Check out repository
      # ─────────────────────────────────────────────────────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────────────────
      # 3️⃣  Decode your Base64‐encoded secrets into files
      #       • signing.p12
      #       • app.mobileprovision
      #       • asc_key.p8
      # ─────────────────────────────────────────────────────────────────────────
      - name: Decode iOS artifacts from secrets
        run: |
          echo "$P12_BASE64"     | base64 --decode > signing.p12
          echo "$PROFILE_BASE64" | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64" | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      # ─────────────────────────────────────────────────────────────────────────
      # 4️⃣  Import the .p12 into a temporary “temp” keychain
      # ─────────────────────────────────────────────────────────────────────────
      - name: Import signing certificate
        id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      # ─────────────────────────────────────────────────────────────────────────
      # 5️⃣  Install the provisioning profile into
      #      ~/Library/MobileDevice/Provisioning Profiles/, exporting IOS_PROFILE_UUID
      # ─────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile
        id: install-profile
        run: |
          # Decode the mobileprovision into a plain plist
          security cms -D -i app.mobileprovision -o profile.plist

          # Extract the UUID from that plist
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)

          # Copy the .mobileprovision under its UUID into Xcode’s expected folder
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          # Expose this UUID to the environment
          echo "IOS_PROFILE_UUID=$uuid" >> "$GITHUB_ENV"

      # ─────────────────────────────────────────────────────────────────────────
      # 6️⃣  Install the exact .NET 8.0.301 SDK
      # ─────────────────────────────────────────────────────────────────────────
      - name: Use .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.301

      # ─────────────────────────────────────────────────────────────────────────
      # 7️⃣  Pin & install maui-ios@17.4.0
      #      (must happen before any “restore/publish net8.0-ios”)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Pin & install maui-ios@17.4.0
        run: |
          # This makes sure the workload manifests match 17.4 from global.json (if you use one)
          dotnet workload restore

          # Install exactly maui-ios version 17.4.0
          dotnet workload install maui-ios --version 17.4.0

      # ─────────────────────────────────────────────────────────────────────────
      # 8️⃣  Restore only the iOS target (skip Android entirely)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Restore net8.0-ios assets
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      # ─────────────────────────────────────────────────────────────────────────
      # 9️⃣  Publish iOS → .ipa (disable trimming, use SdkOnly linker)
      #       • CodesignKeychain comes from the “temp” keychain that step 4 created.
      #       • CodesignProvision uses ${{ env.IOS_PROFILE_UUID }} from step 5.
      # ─────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS → .ipa
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}" \
            /p:PublishTrimmed=false \
            /p:MtouchLink=SdkOnly

      - name: List IPA output
        run: |
          echo "---- contents of out/ ----"
          ls -l out

      # ─────────────────────────────────────────────────────────────────────────
      # 🔟  Install Ruby & Fastlane (via Bundler cache)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ─────────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣  Deliver the .ipa to TestFlight/App Store Connect
      #        (uses maierj/fastlane-action@v3.1.0)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:         ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: 'true'
          APP_STORE_CONNECT_API_KEY_CONTENT:           ${{ secrets.ASC_KEY_BASE64 }}
