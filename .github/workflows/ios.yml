# .github/workflows/ios-build.yml

name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    # pin this exactly so our cache key is stable
    env:
      MAUI_IOS_WORKLOAD: 17.4.0

    steps:
      # ────────────────────────────────────────────────────────────────────
      # 0️⃣  Print runner + OpenSSL versions (just for debugging)
      # ────────────────────────────────────────────────────────────────────
      - name: Env / Tool Versions  🔍
        run: |
          sw_vers
          uname -a
          which openssl && openssl version
          echo "Shell: $SHELL"
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 1️⃣  Check out your code
      # ────────────────────────────────────────────────────────────────────
      - name: Checkout Code
        uses: actions/checkout@v4

      # ────────────────────────────────────────────────────────────────────
      # 2️⃣  Cache NuGet packages
      # ────────────────────────────────────────────────────────────────────
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ────────────────────────────────────────────────────────────────────
      # 3️⃣  Cache .NET MAUI iOS workloadpacks 
      # ────────────────────────────────────────────────────────────────────
      - name: Cache MAUI iOS workloadpacks
        uses: actions/cache@v3
        with:
          path: ~/.nuget/workloadpacks
          key: ${{ runner.os }}-workloadpacks-maui-ios-${{ env.MAUI_IOS_WORKLOAD }}
          restore-keys: |
            ${{ runner.os }}-workloadpacks-maui-ios-

      # ────────────────────────────────────────────────────────────────────
      # 4️⃣  Reconstruct all of our signing files from Base64 → actual files
      # ────────────────────────────────────────────────────────────────────
      - name: Restore Signing Files from Secrets
        run: |
          echo "${{ secrets.P12_BASE64 }}"      | base64 --decode > signing.p12
          echo "${{ secrets.PROFILE_BASE64 }}"  | base64 --decode > app.mobileprovision
          echo "${{ secrets.ASC_KEY_BASE64 }}"  | base64 --decode > asc_key.p8
          ls -l
        shell: bash

      - name: Check P12 Hash 🔍
        run: shasum -a 256 signing.p12
        shell: bash

      - name: Sanity‐check P12 Password 🔍
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ secrets.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "✅ P12 password is valid"
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 5️⃣  Import the .p12 into a temporary keychain
      # ────────────────────────────────────────────────────────────────────
      - id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: List CodeSigning Identities 🔍
        run: security find-identity -p codesigning -v
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 6️⃣  Install Ruby + Bundler (for Fastlane)
      # ────────────────────────────────────────────────────────────────────
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ────────────────────────────────────────────────────────────────────
      # 7️⃣  Install the .mobileprovision into Xcode’s default folder
      # ────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile 🔍
        id: install-profile
        run: |
          # 1) Decode the CMS‐wrapped .mobileprovision → profile.plist, so we can extract UUID
          security cms -D -i app.mobileprovision -o profile.plist

          # 2) Grab the UUID
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "UUID=$uuid" >> "$GITHUB_ENV"

          # 3) Copy into the standard Xcode folder
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          echo "✅ Installed provisioning profile as $uuid.mobileprovision"
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 8️⃣  Install MAUI iOS workload @17.4.0 (picks from cache if available)
      # ────────────────────────────────────────────────────────────────────
      - name: Install MAUI iOS workload @17.4.0
        run: |
          dotnet workload install maui-ios --version $MAUI_IOS_WORKLOAD
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 9️⃣  Restore only iOS assets (skip Android entirely)
      # ────────────────────────────────────────────────────────────────────
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 🔟  Publish the .ipa (signed) into “out/”
      #    • Uses CodesignKeychain from step 5 
      #    • Uses provisioning‐profile UUID from step 7 
      # ────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly
        shell: bash

      - name: List .ipa Output 🔍
        run: ls -l out
        shell: bash

      # ────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣  Deliver to App Store Connect via Fastlane
      #     (now pinned at v3.1.0 ‒ NOT “@v3”)
      # ────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:         ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: "true"
          APP_STORE_CONNECT_API_KEY_CONTENT:           ${{ secrets.ASC_KEY_BASE64 }}
