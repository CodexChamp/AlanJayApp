# .github/workflows/ios.yml
name: Build & Upload iOS

on:
  push:
    branches: [ master ]

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣  CHECK OUT your repository
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────────────────────
      # 2️⃣  DECODE Base64 SECRETS INTO FILES
      #      • signing.p12
      #      • app.mobileprovision
      #      • asc_key.p8
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Decode iOS artifacts
        run: |
          echo "$P12_BASE64"     | base64 --decode > signing.p12
          echo "$PROFILE_BASE64" | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64" | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      # ─────────────────────────────────────────────────────────────────────────────
      # 3️⃣  IMPORT the P12 into a temporary keychain called “temp”
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Import Distribution certificate
        id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      # ─────────────────────────────────────────────────────────────────────────────
      # 4️⃣  INSTALL the provisioning profile into ~/Library/MobileDevice/Provisioning Profiles/
      #      • Extract its UUID, copy to the standard folder, export IOS_PROFILE_UUID
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile
        id: install-profile
        run: |
          security cms -D -i app.mobileprovision -o profile.plist
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"
          echo "IOS_PROFILE_UUID=$uuid" >> "$GITHUB_ENV"

      # ─────────────────────────────────────────────────────────────────────────────
      # 5️⃣  SETUP .NET SDK 8.0.301 (per your global.json)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Use .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.301

      # ─────────────────────────────────────────────────────────────────────────────
      # 6️⃣  PIN & INSTALL the exact maui-ios workload version (17.4.0)
      #      This must run BEFORE any “msbuild … /t:Restore /p:TargetFramework=net8.0-ios” call
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Install maui-ios@17.4.0
        run: |
          dotnet workload restore          # ensures global.json workloads are restored
          dotnet workload install maui-ios --version 17.4.0

      # ─────────────────────────────────────────────────────────────────────────────
      # 7️⃣  RESTORE only the net8.0-ios target (skipping Android)
      #      Adjust the path to your .csproj if it sits in a subfolder
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Restore net8.0-ios assets
        run: |
          dotnet msbuild ./AlanJayApp/AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      # ─────────────────────────────────────────────────────────────────────────────
      # 8️⃣  PUBLISH the signed .ipa (no Android)
      #      • Uses “temp” keychain from step 3
      #      • CodesignProvision references $(IOS_PROFILE_UUID)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI iOS → .ipa
        run: |
          dotnet publish ./AlanJayApp/AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly

      - name: List IPA output
        run: |
          echo "--- out folder contents ---"
          ls -l out

      # ─────────────────────────────────────────────────────────────────────────────
      # 9️⃣  SETUP Ruby & FASTLANE
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ─────────────────────────────────────────────────────────────────────────────
      # 🔟  DELIVER the .ipa to TestFlight via Fastlane
      #      • Uses maierj/fastlane-action@v3.1.0
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:         ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: 'true'
          APP_STORE_CONNECT_API_KEY_CONTENT:           ${{ secrets.ASC_KEY_BASE64 }}
