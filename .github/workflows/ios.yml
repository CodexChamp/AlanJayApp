# File: .github/workflows/ios‚Äêmaui‚Äêbuild.yml
name: Build & Distribute iOS

# Trigger on pushes to master
on:
  push:
    branches:
      - master

jobs:
  ios‚Äêbuild:
    runs-on: macos-15          # Use macOS 15 (Xcode 16 / iOS 18 SDK)

    env:
      # The code‚Äêsign identity exactly as it appears in your .p12
      CODESIGN_IDENTITY: "Apple Distribution: rylan champion (YUDP2VB9YY)"

      # Pin the MAUI iOS workload version (must match your global.json)
      MAUI_IOS_WORKLOAD: "17.4.0"

      # We will publish in Release mode
      BUILD_CONFIGURATION: "Release"

    steps:
      ############################################################################
      # 0Ô∏è‚É£  Show runner OS & tool versions (optional but useful for debugging) 
      ############################################################################
      - name: Env / Tool Versions üîç
        run: |
          echo "== macOS Version =="
          sw_vers
          echo ""
          echo "== Kernel Info =="
          uname -a
          echo ""
          echo "== OpenSSL =="
          which openssl && openssl version
          echo ""
          echo "== Dotnet (pre‚Äêinstall) =="
          dotnet --version || echo "not installed yet" 

      ##########################################################################
      # 1Ô∏è‚É£  Check out your code
      ##########################################################################
      - name: Checkout Code
        uses: actions/checkout@v4

      ##########################################################################
      # 2Ô∏è‚É£  Cache your NuGet packages folder
      ##########################################################################
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          # This path covers all downloaded NuGet packages
          path: ~/.nuget/packages
          # ‚ÄúhashFiles‚Äù ensures the cache key changes if any .csproj changes
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      ##########################################################################
      # 3Ô∏è‚É£  Cache your .NET workload packs under ~/.dotnet
      ##########################################################################
      - name: Cache .NET workload packs
        uses: actions/cache@v3
        with:
          # Caches everything under ~/.dotnet (SDK + workload packs)
          path: ~/.dotnet
          # Bump ‚Äú8.0.301‚Äù if you ever update your global.json to a newer SDK
          key: dotnet-workloads-${{ runner.os }}-8.0.301

      ############################################################################
      # 4Ô∏è‚É£  Restore signing files (P12 + .mobileprovision + ASC key) from secrets
      #     We assume you have created these three secrets in GitHub:
      #       ‚Ä¢ P12_BASE64       (contents of your .p12, base64‚Äêencoded)
      #       ‚Ä¢ PROFILE_BASE64   (contents of your .mobileprovision, base64‚Äêencoded)
      #       ‚Ä¢ ASC_KEY_BASE64   (contents of your AppStore Connect .p8, base64‚Äêencoded)
      #     You also need these three ‚Äúunencoded‚Äù secrets to exist:
      #       ‚Ä¢ P12_PASSWORD     (the password for your P12)
      #       ‚Ä¢ ASC_KEY_ID       (your AppStore Connect Key ID)
      #       ‚Ä¢ ASC_ISSUER_ID    (your AppStore Connect Issuer ID)
      ############################################################################
      - name: Restore signing files
        run: |
          # Decode and write out the three artifacts
          echo "$P12_BASE64" | base64 --decode > signing.p12
          echo "$PROFILE_BASE64" | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64" | base64 --decode > asc_key.p8

          ls -l signing.p12 app.mobileprovision asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 5Ô∏è‚É£  Quick sanity checks on your .p12 OK-passwd
      ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Check P12 Hash üîç
        run: shasum -a 256 signing.p12

      - name: Sanity‚Äêcheck P12 password üîç
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ secrets.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "‚úÖ P12 password is correct"
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      ############################################################################
      # 6Ô∏è‚É£  Import certificate into a temporary keychain (‚Äúimport-certs‚Äù step)
      #     This lets ‚ÄúCodesignKey‚Äù be found by msbuild later.
      ############################################################################
      - name: Import Signing Certificate üîë
        uses: apple-actions/import-codesign-certs@v2
        id: import-certs
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: List CodeSigning Identities üîç
        run: security find-identity -p codesigning -v

      ############################################################################
      # 7Ô∏è‚É£  Set up Ruby + Bundler for Fastlane (we‚Äôll need this later)
      ############################################################################
      - name: Setup Ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      ############################################################################
      # 8Ô∏è‚É£  Install the provisioning profile so Xcode can see it
      #     We decode, extract the UUID, copy into ~/Library/MobileDevice/‚Ä¶.
      ############################################################################
      - name: Install Provisioning Profile üîè
        id: install-profile
        run: |
          # Decode the CMS wrapper ‚Üí plist
          security cms -D -i app.mobileprovision -o profile.plist

          # Grab its UUID
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "UUID=$uuid"       >> "$GITHUB_ENV"

          # Make sure the provisioning‚Äêprofiles folder exists
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # Copy under the exact UUID filename
          cp app.mobileprovision \
             "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          echo "Installed provisioning profile as $uuid.mobileprovision"
        env:
          # No extra vars needed here; we already have app.mobileprovision on disk.

      ############################################################################
      # 9Ô∏è‚É£  Install the exact .NET SDK (from global.json) so that
      #     subsequent dotnet commands use 8.0.301.
      ############################################################################
      - name: Setup .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.301'

      ############################################################################
      # üîü  Pin & install maui-iOS@17.4.0
      #     (because you‚Äôre targeting iOS 18 with .NET 8)
      ############################################################################
      - name: Pin & Install MAUI iOS workload @17.4.0
        run: dotnet workload install maui-ios --version $MAUI_IOS_WORKLOAD

      ############################################################################
      # 1Ô∏è‚É£1Ô∏è‚É£  Restore only the iOS assets (skips Android entirely)
      ############################################################################
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      ############################################################################
      # 1Ô∏è‚É£2Ô∏è‚É£  Publish a fully‚Äêsigned, trimmed .ipa
      #       ‚Ä¢ MUST have /p:PublishTrimmed=true on iOS 18+.
      #       ‚Ä¢ We point to the keychain path from import-certs@v2.
      ############################################################################
      - name: Publish .NET MAUI for iOS üöÄ
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c $BUILD_CONFIGURATION \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="$CODESIGN_IDENTITY" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly
        env:
          CODESIGN_IDENTITY: ${{ env.CODESIGN_IDENTITY }}

      - name: List .ipa Output üîç
        run: |
          echo "---- Published .ipa ‚Üí out/ ----"
          ls -l out

      ############################################################################
      # 1Ô∏è‚É£3Ô∏è‚É£  Upload to TestFlight / App Store Connect via Fastlane
      #       We‚Äôll pass in your ASC Key ID + Issuer ID + base64 content
      ############################################################################
      - name: Deliver to App Store Connect ‚úàÔ∏è
        uses: maierj/fastlane-action@v3
        with:
          lane: deliver
        env:
          # Supply your AppStore Connect Key ID + Issuer ID + base64‚Äêencoded .p8
          APP_STORE_CONNECT_API_KEY_KEY_ID:       ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:    ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: "true"
          APP_STORE_CONNECT_API_KEY_CONTENT:      ${{ secrets.ASC_KEY_BASE64 }}
