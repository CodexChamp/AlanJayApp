name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-15

    env:
      # These three secrets come from Settings → Secrets → Actions
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      ASC_KEY_ID:   ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}

    steps:
      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣  Cache NuGet packages
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}-${{ hashFiles('**/Directory.Packages.props') }}

      # ─────────────────────────────────────────────────────────────────────────────
      # 2️⃣  Cache .NET workloads & SDK packs (to speed up `dotnet workload restore`)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Cache .NET workloads
        uses: actions/cache@v3
        id: dotnet-workload-cache
        with:
          path: |
            ~/.dotnet
            ~/.nuget/work
          key: ${{ runner.os }}-dotnet-workloads-${{ hashFiles('global.json') }}

      # ─────────────────────────────────────────────────────────────────────────────
      # 3️⃣  Check out repository
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────────────────────
      # 4️⃣  Install .NET SDK pinned in global.json
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Use .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.301

      # ─────────────────────────────────────────────────────────────────────────────
      # 5️⃣  Sanity‐check versions (optional but helpful)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Env / tool versions 🔍
        run: |
          dotnet --info
          sw_vers
          xcodebuild -version | head -1

      # ─────────────────────────────────────────────────────────────────────────────
      # 6️⃣  Recreate signing artifacts from secrets
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Restore signing files
        run: |
          echo "${{ secrets.P12_BASE64 }}"     | base64 --decode > signing.p12
          echo "${{ secrets.PROFILE_BASE64 }}" | base64 --decode > app.mobileprovision
          echo "${{ secrets.ASC_KEY_BASE64 }}" | base64 --decode > asc_key.p8

      - name: List working directory 🔍
        run: ls -l

      - name: Check p12 hash 🔍
        run: shasum -a 256 signing.p12

      - name: Sanity-check p12 password 🔍
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ env.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "Password accepted ✔︎"

      # ─────────────────────────────────────────────────────────────────────────────
      # 7️⃣  Import certificate into a temporary keychain
      # ─────────────────────────────────────────────────────────────────────────────
      - id: import-certs
        name: Install code signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ env.P12_PASSWORD }}

      - name: List keychain identities 🔍
        run: security find-identity -p codesigning -v

      # ─────────────────────────────────────────────────────────────────────────────
      # 8️⃣  Install provisioning profile where Xcode expects it
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile 🔍
        id: install-profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # Decode CMS‐wrapped .mobileprovision into a plist
          security cms -D -i app.mobileprovision -o profile.plist
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          cp app.mobileprovision \
             ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
          echo "UUID=$uuid" >> "$GITHUB_ENV"
          echo "Installed provisioning profile as $uuid.mobileprovision"

      # ─────────────────────────────────────────────────────────────────────────────
      # 9️⃣  Restore all workloads (will use cache if available)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Restore .NET workloads
        run: dotnet workload restore

      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣0️⃣  Pin & install exact maui-ios workload (17.4.0)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Pin & install maui-ios@17.4.0
        run: dotnet workload install maui-ios --version 17.4.0

      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣  Restore only iOS bits (skip Android entirely)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣2️⃣  Publish your .ipa (signed + trimmed)
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS 🚀
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly

      - name: List publish output 🔍
        run: ls -l out

      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣3️⃣  Set up Bundler & install Fastlane locally
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Setup Bundler & Fastlane
        run: |
          gem install bundler
          bundle init
          echo 'gem "fastlane"' >> Gemfile
          bundle config set path vendor/bundle
          bundle install

      # ─────────────────────────────────────────────────────────────────────────────
      # 1️⃣4️⃣  Deliver .ipa to TestFlight via Fastlane
      # ─────────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        run: |
          bundle exec fastlane deliver \
            --ipa out/AlanJayApp.ipa \
            --api_key_path asc_key.p8 \
            --issuer_id ${{ env.ASC_ISSUER_ID }} \
            --key_id ${{ env.ASC_KEY_ID }}
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
