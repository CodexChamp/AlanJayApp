# .github/workflows/ios.yml
name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # ─────────────────────────────────────────────────────────────────────────
      # 1️⃣  Check out your repository
      # ─────────────────────────────────────────────────────────────────────────
      - name: ▶️ Checkout code
        uses: actions/checkout@v4


      # ─────────────────────────────────────────────────────────────────────────
      # 2️⃣  Decode your three Base64‐encoded secrets into actual files:
      #    • ${{ secrets.P12_BASE64 }} → signing.p12
      #    • ${{ secrets.PROFILE_BASE64 }} → app.mobileprovision
      #    • ${{ secrets.ASC_KEY_BASE64 }} → asc_key.p8
      # ─────────────────────────────────────────────────────────────────────────
      - name: Decode iOS signing artifacts
        run: |
          echo "$P12_BASE64"      | base64 --decode > signing.p12
          echo "$PROFILE_BASE64"  | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64"  | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}


      # ─────────────────────────────────────────────────────────────────────────
      # 3️⃣  Import your Distribution certificate (signing.p12) into a
      #     throw-away keychain.  The apple-actions/import-codesign-certs@v2
      #     action will:
      #       • create a temp keychain
      #       • import signing.p12 (using P12_PASSWORD)
      #       • expose `steps.import-certs.outputs.keychain-path`
      #       • clean up the keychain at the end
      # ─────────────────────────────────────────────────────────────────────────
      - name: Import Apple Distribution certificate 🗝️
        id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}


      # ─────────────────────────────────────────────────────────────────────────
      # 4️⃣  Install your provisioning profile
      #      • Decode the CMS wrapper to plist → extract its UUID
      #      • Place the .mobileprovision in ~/Library/MobileDevice/Provisioning Profiles/<UUID>.mobileprovision
      #      • Export the UUID into $GITHUB_ENV so we can reference it in MSBuild
      # ─────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile 📦
        id: install-profile
        run: |
          # Decode the mobileprovision to a temporary plist so we can read the UUID
          security cms -D -i app.mobileprovision -o profile.plist

          # Extract the UUID field
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)

          # Create the folder that Xcode expects
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # Copy the .mobileprovision into that folder, named by UUID
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          # Export the UUID for later MSBuild steps
          echo "IOS_PROFILE_UUID=$uuid" >> "$GITHUB_ENV"

          echo "✅ Installed provisioning profile at $uuid.mobileprovision"


      # ─────────────────────────────────────────────────────────────────────────
      # 5️⃣  Install the exact .NET 8.0.301 SDK listed in global.json
      # ─────────────────────────────────────────────────────────────────────────
      - name: Setup .NET SDK 8.0 .301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.301'


      # ─────────────────────────────────────────────────────────────────────────
      # 6️⃣  Pin & install just the MAUI iOS workload (skips Android, WinUI, etc.)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Install maui-ios workload (v17.4.0)
        run: dotnet workload install maui-ios --version 17.4.0


      # ─────────────────────────────────────────────────────────────────────────
      # 7️⃣  Build & sign your .IPA in one step (msbuild auto-restores):
      #      • /p:BuildIpa=true
      #      • /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)"
      #      • /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}"
      #      • /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}"
      # ─────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI iOS → .ipa
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly

      - name: List IPA output folder 🔍
        run: |
          echo "────── out/ contents ──────"
          ls -l out
          echo "───────────────────────────"


      # ─────────────────────────────────────────────────────────────────────────
      # 8️⃣  Setup Ruby + Bundler (caches gems automatically)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true


      # ─────────────────────────────────────────────────────────────────────────
      # 9️⃣  Upload that .IPA to TestFlight / ASC using Fastlane:
      #     • We supply your Key ID + Issuer ID + the Base64‐encoded .p8 file
      # ─────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect 🚀
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:                ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:          ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: 'true'
          APP_STORE_CONNECT_API_KEY_CONTENT:            ${{ secrets.ASC_KEY_BASE64 }}
