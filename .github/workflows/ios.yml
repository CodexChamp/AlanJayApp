# .github/workflows/ios-build.yml

name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    # We’ll reference this environment variable later when we cache workload packs
    env:
      MAUI_IOS_WORKLOAD: 17.4.0

    steps:
      # ──────────────────────────────────────────────────────────────────────────
      # 0️⃣  Print runner + OpenSSL versions (debugging)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Env / Tool Versions 🔍
        run: |
          sw_vers
          uname -a
          which openssl && openssl version
          echo "Shell: $SHELL"
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣  Check out your code
      # ──────────────────────────────────────────────────────────────────────────
      - name: Checkout Code
        uses: actions/checkout@v4

      # ──────────────────────────────────────────────────────────────────────────
      # 2️⃣  Cache NuGet packages (so `dotnet restore` is fast)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # We hash all .sln/.csproj files so that if you change project references, we bust cache
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln','**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ──────────────────────────────────────────────────────────────────────────
      # 3️⃣  Cache MAUI iOS workload packs (so you don't re-download the entire workload every time)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Cache .NET MAUI iOS workload packs
        uses: actions/cache@v3
        with:
          path: ~/.nuget/workloadpacks
          key: ${{ runner.os }}-workloadpacks-maui-ios-${{ env.MAUI_IOS_WORKLOAD }}
          restore-keys: |
            ${{ runner.os }}-workloadpacks-maui-ios-

      # ──────────────────────────────────────────────────────────────────────────
      # 4️⃣  Reconstruct your signing artifacts from Base64-encoded secrets:
      #     • signing.p12
      #     • app.mobileprovision
      #     • asc_key.p8
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore Signing Files from Secrets
        run: |
          echo "${{ secrets.P12_BASE64 }}"      | base64 --decode > signing.p12
          echo "${{ secrets.PROFILE_BASE64 }}"  | base64 --decode > app.mobileprovision
          echo "${{ secrets.ASC_KEY_BASE64 }}"  | base64 --decode > asc_key.p8

          ls -l
        shell: bash

      - name: Check P12 hash 🔍
        run: shasum -a 256 signing.p12
        shell: bash

      - name: Sanity-check P12 password 🔍
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ secrets.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "✅ P12 password is valid"
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 5️⃣  Import the .p12 into a temporary keychain (apple-actions/import-codesign-certs)
      # ──────────────────────────────────────────────────────────────────────────
      - id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: List CodeSigning Identities 🔍
        run: security find-identity -p codesigning -v
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 6️⃣  Install Ruby + Bundler (so we can run Fastlane later)
      # ──────────────────────────────────────────────────────────────────────────
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ──────────────────────────────────────────────────────────────────────────
      # 7️⃣  Install the .mobileprovision into Xcode’s default folder:
      #     • Decode the CMS‐wrapped .mobileprovision to a plist
      #     • Extract the UUID
      #     • Copy file → ~/Library/MobileDevice/Provisioning Profiles/[UUID].mobileprovision
      #     • Export that UUID into ${{ env.UUID }}
      # ──────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile 🔍
        id: install-profile
        run: |
          # Decode the .mobileprovision into a temporary plist so we can read UUID
          security cms -D -i app.mobileprovision -o profile.plist

          # Extract the UUID
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "UUID=$uuid" >> "$GITHUB_ENV"

          # Copy the actual .mobileprovision into the Xcode‐expected directory
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          echo "✅ Installed provisioning profile as $uuid.mobileprovision"
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 8️⃣  Install the .NET 8 SDK exactly, in case it’s not already present
      # ──────────────────────────────────────────────────────────────────────────
      - name: Install .NET 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.301'

      # ──────────────────────────────────────────────────────────────────────────
      # 9️⃣  Restore all workloads (this picks up global.json pin to maui-ios@17.4)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore .NET workloads
        run: dotnet workload restore
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 🔟  Install MAUI iOS workload exactly @17.4.0 (will hit cache if present)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Install MAUI iOS workload @17.4.0
        run: dotnet workload install maui-ios --version $MAUI_IOS_WORKLOAD
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣  Restore only the iOS assets (skip Android entirely)
      #        Notice the path “./AlanJayApp/AlanJayApp.csproj” matches your project location
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp/AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣2️⃣  Publish the signed .ipa
      #        • Uses /p:CodesignKeychain from import‐certs step
      #        • Uses /p:CodesignProvision from install‐profile ($ENV:UUID)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS
        run: |
          dotnet publish ./AlanJayApp/AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly
        shell: bash

      - name: List .ipa Output 🔍
        run: ls -l out
        shell: bash

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣3️⃣  Deliver to App Store Connect (TestFlight) using Fastlane
      #        Note: pin to a real tag, not “@v3” which does not exist
      # ──────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:         ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: "true"
          APP_STORE_CONNECT_API_KEY_CONTENT:           ${{ secrets.ASC_KEY_BASE64 }}
