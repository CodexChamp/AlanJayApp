# .github/workflows/ios.yml
name: Build & Upload iOS

on:
  push:
    branches: [ master ]

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # ——————————————
      # 1️⃣  Checkout
      # ——————————————
      - name: Checkout code
        uses: actions/checkout@v4

      # ——————————————
      # 2️⃣  Decode Base64 secrets into files
      #    • P12_BASE64 → signing.p12
      #    • PROFILE_BASE64 → app.mobileprovision
      #    • ASC_KEY_BASE64 → asc_key.p8
      # ——————————————
      - name: Decode iOS artifacts
        run: |
          echo "$P12_BASE64"      | base64 --decode > signing.p12
          echo "$PROFILE_BASE64"  | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64"  | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      # ——————————————
      # 3️⃣  Import your .p12 into a temp keychain
      #     (apple-actions/import-codesign-certs@v2)
      # ——————————————
      - name: Import Distribution certificate
        id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      # ——————————————
      # 4️⃣  Install provisioning profile
      #     • Extract its UUID
      #     • Copy to ~/Library/MobileDevice/Provisioning Profiles/<UUID>.mobileprovision
      #     • Export IOS_PROFILE_UUID for MSBuild
      # ——————————————
      - name: Install provisioning profile
        id: install-profile
        run: |
          # Decode to a plist so we can read the UUID
          security cms -D -i app.mobileprovision -o profile.plist

          # Extract UUID
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)

          # Create the folder and copy it
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          # Export for later steps
          echo "IOS_PROFILE_UUID=$uuid" >> "$GITHUB_ENV"

      # ——————————————
      # 5️⃣  Setup .NET 8.0.301 (per global.json)
      # ——————————————
      - name: Use .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.301'

      # ——————————————
      # 6️⃣  Pin & install exactly the iOS MAUI workload 17.4.0
      # ——————————————
      - name: Install maui-ios@17.4.0
        run: dotnet workload install maui-ios --version 17.4.0

      # ——————————————
      # 7️⃣  Restore only the iOS assets (skips Android)
      #     This writes obj/project.assets.json for net8.0-ios/ios-arm64
      # ——————————————
      - name: Restore net8.0-ios only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      # ——————————————
      # 8️⃣  Publish just net8.0-ios → signed .ipa
      #     • /p:BuildIpa=true
      #     • /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)"
      #     • /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}"
      #     • /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}"
      #     • --no-restore to avoid re­-restoring Android
      # ——————————————
      - name: Publish .NET MAUI iOS → .ipa
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c Release \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.IOS_PROFILE_UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly

      - name: List IPA folder
        run: |
          echo "--- out/ folder contents ---"
          ls -l out

      # ——————————————
      # 9️⃣  Setup Ruby & Bundler (caches gems automatically)
      # ——————————————
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ——————————————
      # 🔟  Upload the .ipa to TestFlight via Fastlane
      #     • uses maierj/fastlane-action@v3.1.0 (valid tag)
      #     • supplies ASC_KEY_ID, ASC_ISSUER_ID, ASC_KEY_BASE64
      # ——————————————
      - name: Deliver to App Store Connect
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:         ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: 'true'
          APP_STORE_CONNECT_API_KEY_CONTENT:           ${{ secrets.ASC_KEY_BASE64 }}
