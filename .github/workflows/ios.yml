# .github/workflows/ios-build-and-upload.yml
name: Build & Upload iOS

#  Run this workflow on every push to master
on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    # We will reference these environment variables throughout.
    env:
      DOTNET_SDK:        8.0.301      # pinned to exactly what your global.json expects
      MAUI_IOS_WORKLOAD: 17.4.0       # pinned version of maui-ios workload
      BUILD_CONFIGURATION: Release    # build in Release mode

    steps:
      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣  SHOW RUNNER INFO & TOOL VERSIONS (optional but helpful)
      # ────────────────────────────────────────────────────────────────────────
      - name: Env / tool versions 🔍
        run: |
          sw_vers
          uname -a
          which openssl && openssl version
          echo "Shell: $SHELL"

      # ────────────────────────────────────────────────────────────────────────
      # 2️⃣  CHECK OUT YOUR CODE
      # ────────────────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ────────────────────────────────────────────────────────────────────────
      # 3️⃣  CACHE NuGet PACKAGES
      #    - This will save/restore ~/.nuget/packages based on your solution (.sln/.csproj) hash
      # ────────────────────────────────────────────────────────────────────────
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # We use a composite key of OS + hash of all .sln/.csproj files under the repo
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ────────────────────────────────────────────────────────────────────────
      # 4️⃣  CACHE .NET WORKLOADPACKS (including maui-ios)
      #    - This will save/restore ~/.nuget/workloadpacks
      #    - We include the exact version of maui-ios so that if you bump MAUI_IOS_WORKLOAD,
      #      the cache key changes and we repopulate a fresh one.
      # ────────────────────────────────────────────────────────────────────────
      - name: Cache MAUI iOS workload packs
        uses: actions/cache@v3
        with:
          path: ~/.nuget/workloadpacks
          key: ${{ runner.os }}-workloadpacks-maui-ios-${{ env.MAUI_IOS_WORKLOAD }}
          restore-keys: |
            ${{ runner.os }}-workloadpacks-maui-ios-

      # ────────────────────────────────────────────────────────────────────────
      # 5️⃣  INSTALL THE EXACT .NET SDK VERSION
      # ────────────────────────────────────────────────────────────────────────
      - name: Setup .NET SDK ${{ env.DOTNET_SDK }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK }}

      # ────────────────────────────────────────────────────────────────────────
      # 6️⃣  RECREATE SIGNING ARTIFACTS FROM YOUR SECRETS
      #
      #    We expect you to have stored the following GitHub Secrets:
      #      • P12_BASE64         → base64‐encoded contents of your .p12
      #      • P12_PASSWORD       → password for that .p12
      #      • PROFILE_BASE64     → base64‐encoded contents of your .mobileprovision
      #      • ASC_KEY_BASE64     → base64‐encoded contents of your .p8 App Store Connect key
      #      • ASC_KEY_ID         → the Key ID (from App Store Connect)
      #      • ASC_ISSUER_ID      → the Issuer ID (from App Store Connect)
      #
      #    Here we decode them back into files on disk under the runner’s workspace.
      # ────────────────────────────────────────────────────────────────────────
      - name: Restore signing files from secrets
        run: |
          # → Decode P12 (your distribution certificate)
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > signing.p12

          # → Decode provisioning profile (your .mobileprovision)
          echo "${{ secrets.PROFILE_BASE64 }}" | base64 --decode > app.mobileprovision

          # → Decode App Store Connect key (your .p8)
          echo "${{ secrets.ASC_KEY_BASE64 }}" | base64 --decode > asc_key.p8
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 7️⃣  SANITY‐CHECK YOUR P12
      #    We run a quick hash and verify the password is correct.
      # ────────────────────────────────────────────────────────────────────────
      - name: Check P12 hash 🔍
        run: |
          shasum -a 256 signing.p12

      - name: Sanity‐check P12 password 🔍
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ secrets.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "Password accepted ✔︎"
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 8️⃣  IMPORT CERTIFICATE INTO A THROW‐AWAY KEYCHAIN
      #    - Uses apple-actions/import-codesign-certs@v2
      #    - After this step, your “Apple Distribution: rylan champion (YUDP2VB9YY)”
      #      identity will be available in a temp keychain.
      # ────────────────────────────────────────────────────────────────────────
      - id: import-certs
        name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}
          # By default, this action creates and uses a temporary keychain; its
          # path is returned in steps.import-certs.outputs.keychain-path.

      # ────────────────────────────────────────────────────────────────────────
      # 9️⃣  LIST CURRENT CODESIGN IDENTITIES (optional debug)
      # ────────────────────────────────────────────────────────────────────────
      - name: List code signing identities 🔍
        run: |
          security find-identity -p codesigning -v
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 🔟  INSTALL RUBY (Fastlane) AND CACHE GEM INSTALLS
      #     so that subsequent runs don’t reinstall all gems
      # ────────────────────────────────────────────────────────────────────────
      - name: Setup Ruby & cache gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'      # you can pin to whatever Ruby you prefer
          bundler-cache: true      # caches vendor/bundle automatically

      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣  INSTALL PROVISIONING PROFILE
      #    - Decode the CMS wrapper into a plist
      #    - Extract the UUID
      #    - Copy the profile into ~/Library/MobileDevice/Provisioning Profiles
      #    - Export the UUID as $UUID for subsequent code‐signing
      # ────────────────────────────────────────────────────────────────────────
      - id: install-profile
        name: Install provisioning profile 🔍
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # 1. Decode .mobileprovision → profile.plist
          security cms -D -i app.mobileprovision -o profile.plist

          # 2. Extract UUID from the plist
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "UUID=$uuid" >> "$GITHUB_ENV"

          # 3. Copy the provisioning profile into the standard folder
          cp app.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          echo "Installed provisioning profile as: $uuid.mobileprovision"
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣2️⃣  INSTALL ALL WORKLOADS (picks up global.json pin)
      #      - Because we cached ~/.nuget/workloadpacks above, this should be very fast
      # ────────────────────────────────────────────────────────────────────────
      - name: Restore & install workloads 🎯
        run: |
          dotnet workload restore
          dotnet workload install maui-ios --version ${{ env.MAUI_IOS_WORKLOAD }}
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣3️⃣  RESTORE ONLY iOS ASSETS (skip Android entirely)
      #      - This avoids needing the android workload at all.
      # ────────────────────────────────────────────────────────────────────────
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣4️⃣  PUBLISH YOUR .ipa
      #      - Builds a signed iOS IPA into “out/”
      #      - Uses the identity “Apple Distribution: rylan champion (YUDP2VB9YY)”
      #        which was installed in the temporary keychain by import-certs
      #      - Points Xcode to use $(UUID).mobileprovision
      #
      #      Note: We set PublishTrimmed=true and MtouchLink=SdkOnly by default.
      #            If you want no trimming, you could adapt as described in errors.
      # ────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS (produce .ipa)
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c ${{ env.BUILD_CONFIGURATION }} \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly
        shell: bash

      - name: List .ipa output 🔍
        run: |
          echo "──── Out folder contents ────"
          ls -l out
          echo "──────────────────────────────"
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 1️⃣5️⃣  DELIVER TO TESTFLIGHT / APP STORE CONNECT
      #      - We already installed Fastlane via `bundle install`
      #      - We download the asc_key.p8 earlier, so we can pass it here
      # ────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        run: |
          bundle exec fastlane deliver \
            --ipa out/AlanJayApp.ipa \
            --api_key_path asc_key.p8 \
            --issuer_id ${{ secrets.ASC_ISSUER_ID }} \
            --key_id ${{ secrets.ASC_KEY_ID }}
        shell: bash
