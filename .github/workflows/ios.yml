# File: .github/workflows/ios‚Äêmaui‚Äêbuild.yml

name: Build & Distribute iOS

# Trigger on pushes to master
on:
  push:
    branches:
      - master

jobs:
  ios‚Äêbuild:
    runs-on: macos-15   # Use macOS 15 (which includes Xcode 16/iOS 18 SDK)

    env:
      # The code‚Äêsign identity exactly as it appears inside your .p12
      CODESIGN_IDENTITY: "Apple Distribution: rylan champion (YUDP2VB9YY)"
      # Pin to the exact version of the MAUI iOS workload in your global.json
      MAUI_IOS_WORKLOAD: "17.4.0"
      # Build in Release configuration
      BUILD_CONFIGURATION: "Release"

    steps:
      ######################################################################
      # 0Ô∏è‚É£  Optional: Show runner OS & tool versions for debugging
      ######################################################################
      - name: Env / Tool Versions üîç
        run: |
          echo "== macOS Version =="
          sw_vers
          echo ""
          echo "== Kernel Info =="
          uname -a
          echo ""
          echo "== OpenSSL =="
          which openssl && openssl version
          echo ""
          echo "== Dotnet (before install) =="
          dotnet --version || echo "not installed yet"

      ######################################################################
      # 1Ô∏è‚É£  Check out your code
      ######################################################################
      - name: Checkout Code
        uses: actions/checkout@v4

      ######################################################################
      # 2Ô∏è‚É£  Cache NuGet packages (so we don‚Äôt re‚Äêdownload on every run)
      ######################################################################
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      ######################################################################
      # 3Ô∏è‚É£  Cache .NET workload packs (so we don‚Äôt reinstall maui-ios each run)
      ######################################################################
      - name: Cache .NET workload packs
        uses: actions/cache@v3
        with:
          path: ~/.dotnet
          key: dotnet-workloads-${{ runner.os }}-8.0.301

      ############################################################################
      # 4Ô∏è‚É£  Restore signing artifacts from GitHub Secrets (base64‚Äêencoded)
      #      P12_BASE64          ‚Üí Apple Distribution certificate (.p12)
      #      PROFILE_BASE64      ‚Üí iOS provisioning profile (.mobileprovision)
      #      ASC_KEY_BASE64      ‚Üí App Store Connect API key (.p8)
      #
      #    * You must create these three secrets in your GitHub repo:
      #         ‚Ä¢ P12_BASE64
      #         ‚Ä¢ PROFILE_BASE64
      #         ‚Ä¢ ASC_KEY_BASE64
      #    * And also create these three ‚Äúplain‚Äù secrets:
      #         ‚Ä¢ P12_PASSWORD     (your P12‚Äôs password)
      #         ‚Ä¢ ASC_KEY_ID       (App Store Connect Key ID)
      #         ‚Ä¢ ASC_ISSUER_ID    (App Store Connect Issuer ID)
      ############################################################################
      - name: Restore signing files
        run: |
          # Decode each base64‚Äêencoded secret into its file
          echo "$P12_BASE64"   | base64 --decode > signing.p12
          echo "$PROFILE_BASE64" | base64 --decode > app.mobileprovision
          echo "$ASC_KEY_BASE64" | base64 --decode > asc_key.p8

          # List them to confirm they exist
          ls -l signing.p12 app.mobileprovision asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      ######################################################################
      # 5Ô∏è‚É£  Quick sanity‚Äêchecks on your .p12
      ######################################################################
      - name: Check P12 Hash üîç
        run: shasum -a 256 signing.p12

      - name: Sanity‚Äêcheck P12 password üîê
        run: |
          openssl pkcs12 -in signing.p12 -nokeys \
                         -passin pass:${{ secrets.P12_PASSWORD }} \
                         -clcerts -info >/dev/null
          echo "‚úÖ P12 password is correct"
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      ######################################################################
      # 6Ô∏è‚É£  Import the .p12 into a temporary keychain via apple-actions
      ######################################################################
      - name: Import Signing Certificate üîë
        uses: apple-actions/import-codesign-certs@v2
        id: import-certs
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: List CodeSigning Identities üîç
        run: security find-identity -p codesigning -v

      ######################################################################
      # 7Ô∏è‚É£  Setup Ruby & Bundler for Fastlane (used in final upload)
      ######################################################################
      - name: Setup Ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      ######################################################################
      # 8Ô∏è‚É£  Install the iOS provisioning profile so Xcode can see it
      ######################################################################
      - name: Install Provisioning Profile üîè
        id: install-profile
        run: |
          # Decode the .mobileprovision into a plist
          security cms -D -i app.mobileprovision -o profile.plist

          # Extract its UUID field
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          echo "UUID=$uuid" >> "$GITHUB_ENV"

          # Copy it into the standard location with its UUID filename
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision \
             "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          echo "Installed provisioning profile as $uuid.mobileprovision"

      ######################################################################
      # 9Ô∏è‚É£  Install .NET 8.0.301 (per global.json)
      ######################################################################
      - name: Setup .NET SDK 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.301'

      ######################################################################
      # üîü  Pin & install exactly maui-ios@17.4.0
      ######################################################################
      - name: Pin & Install MAUI iOS workload @17.4.0
        run: dotnet workload install maui-ios --version ${{ env.MAUI_IOS_WORKLOAD }}

      ######################################################################
      # 1Ô∏è‚É£1Ô∏è‚É£  Restore only the iOS assets (skip Android entirely)
      ######################################################################
      - name: Restore iOS assets only
        run: |
          dotnet msbuild ./AlanJayApp.csproj \
            /t:Restore \
            /p:TargetFramework=net8.0-ios \
            /p:RuntimeIdentifier=ios-arm64

      ######################################################################
      # 1Ô∏è‚É£2Ô∏è‚É£  Publish a fully‚Äêsigned, trimmed .ipa for iOS 18
      #       ‚Ä¢ MUST have /p:PublishTrimmed=true on iOS 18+. 
      #       ‚Ä¢ We pass in the keychain path from import-certs@v2 so Xcode
      #         can find the certificate.
      ######################################################################
      - name: Publish .NET MAUI for iOS üöÄ
        run: |
          dotnet publish ./AlanJayApp.csproj \
            -c $BUILD_CONFIGURATION \
            -f net8.0-ios \
            -r ios-arm64 \
            -o out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="${{ env.CODESIGN_IDENTITY }}" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=true \
            /p:MtouchLink=SdkOnly
        env:
          CODESIGN_IDENTITY: ${{ env.CODESIGN_IDENTITY }}

      - name: List .ipa Output üîç
        run: |
          echo "---- Published .ipa ‚Üí out/ ----"
          ls -l out

      ######################################################################
      # 1Ô∏è‚É£3Ô∏è‚É£  Upload to TestFlight via Fastlane‚Äôs ‚Äúdeliver‚Äù lane
      #       We feed it your App Store Connect Key ID, Issuer ID, and
      #       the base64 .p8 content
      ######################################################################
      - name: Deliver to App Store Connect ‚úàÔ∏è
        uses: maierj/fastlane-action@v3
        with:
          lane: deliver
        env:
          APP_STORE_CONNECT_API_KEY_KEY_ID:               ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID:            ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: "true"
          APP_STORE_CONNECT_API_KEY_CONTENT:              ${{ secrets.ASC_KEY_BASE64 }}
