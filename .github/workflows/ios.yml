name: Build & Upload iOS

on:
  push:
    branches:
      - master

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣  CHECK OUT YOUR CODE
      # ──────────────────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ──────────────────────────────────────────────────────────────────────────
      # 2️⃣  SET UP .NET 8.0.301 EXACTLY
      # ──────────────────────────────────────────────────────────────────────────
      - name: Setup .NET 8.0.301
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.301

      # ──────────────────────────────────────────────────────────────────────────
      # 3️⃣  SHOW RUNNER/XCODE INFO (for debugging)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Env / tool versions
        run: |
          sw_vers
          xcodebuild -version | head -1
          dotnet --info

      # ──────────────────────────────────────────────────────────────────────────
      # 4️⃣  DECODE & SAVE YOUR SIGNING ARTIFACTS
      #     (P12, .mobileprovision, and .p8 → stored in secrets as base64)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore signing files
        run: |
          echo "${{ secrets.P12_BASE64 }}"    | base64 --decode > signing.p12
          echo "${{ secrets.PROFILE_BASE64 }}"| base64 --decode > app.mobileprovision
          echo "${{ secrets.ASC_KEY_BASE64 }}" | base64 --decode > asc_key.p8
        env:
          P12_BASE64:     ${{ secrets.P12_BASE64 }}
          PROFILE_BASE64: ${{ secrets.PROFILE_BASE64 }}
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}

      # ──────────────────────────────────────────────────────────────────────────
      # 5️⃣  IMPORT YOUR P12 INTO A TEMPORARY KEYCHAIN
      # ──────────────────────────────────────────────────────────────────────────
      - name: Import signing certificate
        id: import-certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-filepath: signing.p12
          p12-password: ${{ secrets.P12_PASSWORD }}

      # ──────────────────────────────────────────────────────────────────────────
      # 6️⃣  INSTALL THE .mobileprovision INTO XCODE’S FOLDER
      # ──────────────────────────────────────────────────────────────────────────
      - name: Install provisioning profile
        id: install-profile
        run: |
          # Decode the CMS wrapper into plain plist:
          security cms -D -i app.mobileprovision -o tmp.plist

          # Extract the UUID:
          uuid=$(/usr/libexec/PlistBuddy -c 'Print :UUID' tmp.plist)

          # Copy into Xcode’s standard Provisioning Profiles folder:
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp app.mobileprovision \
            "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"

          # Export that UUID into an environment variable for later steps:
          echo "UUID=$uuid" >> "$GITHUB_ENV"

      # ──────────────────────────────────────────────────────────────────────────
      # 7️⃣  CACHE: NuGet PACKAGES & .NET WORKLOADS
      #
      #    This ensures that "dotnet workload install maui-ios" only downloads
      #    once, and subsequent runs reuse the cache.
      # ──────────────────────────────────────────────────────────────────────────
      - name: Cache NuGet packages & .NET workloads
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/workloads
            ~/.dotnet/tools
          key: |
            nuget-workloads-${{ runner.os }}-lockfile-${{ hashFiles('**/global.json','**/*.csproj') }}
          restore-keys: |
            nuget-workloads-${{ runner.os }}-lockfile-

      # ──────────────────────────────────────────────────────────────────────────
      # 8️⃣  RESTORE ALL WORKLOADS (which picks up “maui-ios” from global.json)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore .NET workloads
        run: dotnet workload restore

      # ──────────────────────────────────────────────────────────────────────────
      # 9️⃣  ENSURE EXACTLY maui-ios@17.4.0 (the version that supports iOS 17.5 SDK)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Pin & install maui-ios
        run: dotnet workload install maui-ios --version 17.4.0

      # ──────────────────────────────────────────────────────────────────────────
      # 🔟  RESTORE ONLY THE iOS TARGET (skip Android entirely)
      # ──────────────────────────────────────────────────────────────────────────
      - name: Restore iOS assets only
        run: dotnet restore ./AlanJayApp.csproj \
             -f net8.0-ios \
             -r ios-arm64

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣1️⃣ PUBLISH YOUR .ipa (SIGNED, USING iOS 17.5 SDK, NO TRIMMING/LINKING)
      #
      #   • /p:PublishTrimmed=false   → disables the IL trimming step (which pulls in
      #     newer iOS 18–only APIs).
      #   • /p:MtouchLink=None        → disables the managed linker entirely.
      #   • /p:IosSdkVersion=17.5     → forces the use of Xcode 15.4’s iOS 17.5 SDK.
      #   • /p:CodesignKey=…          → the name of your “Apple Distribution: …” identity
      #   • /p:CodesignKeychain=…     → the temporary keychain path from import-certs
      #   • /p:CodesignProvision=…    → the UUID of the provisioning profile we installed
      # ──────────────────────────────────────────────────────────────────────────
      - name: Publish .NET MAUI for iOS
        run: |
          dotnet publish ./AlanJayApp.csproj \
            --configuration Release \
            --framework net8.0-ios \
            --runtime ios-arm64 \
            --output out \
            --no-restore \
            /p:BuildIpa=true \
            /p:CodesignKey="Apple Distribution: rylan champion (YUDP2VB9YY)" \
            /p:CodesignKeychain="${{ steps.import-certs.outputs.keychain-path }}" \
            /p:CodesignProvision="${{ env.UUID }}" \
            /p:PublishTrimmed=false \
            /p:MtouchLink=None \
            /p:IosSdkVersion=17.5

      - name: List publish output
        run: ls -l out

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣2️⃣ SET UP RUBY + FASTLANE
      # ──────────────────────────────────────────────────────────────────────────
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # ──────────────────────────────────────────────────────────────────────────
      # 1️⃣3️⃣ DELIVER YOUR .ipa TO TESTFLIGHT (via Fastlane)
      #
      #    We already decoded asc_key.p8 in step 4, so we can reference it directly.
      # ──────────────────────────────────────────────────────────────────────────
      - name: Deliver to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY_KEY:       ${{ secrets.ASC_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT:   ${{ secrets.ASC_KEY_BASE64 }}
        run: |
          # If Bundler hasn’t installed fastlane yet (cached gems), run:
          gem install fastlane

          # Use the .p8 file we decoded earlier:
          fastlane deliver \
            --ipa out/AlanJayApp.ipa \
            --api_key_path asc_key.p8 \
            --issuer_id ${{ secrets.ASC_ISSUER_ID }} \
            --key_id    ${{ secrets.ASC_KEY_ID }}
