@namespace AlanJayApp.Pages
@page "/login"
@using AlanJayApp.Services
@inject AuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@inject HttpClient Http

<style src="LoginPage.razor.css" scoped></style>

    <div class="menu">
        <div class="logo-container">
            @if (!string.IsNullOrEmpty(imageSource))
            {
                <img src="@imageSource" width="80%" />
            }
            else
            {
                <p>Loading Image...</p>
            }
        </div>

        <EditForm Model="@this" OnValidSubmit="OnLoginClicked">
            <DataAnnotationsValidator />

            <div>
                <label>Login ID:</label>
                <InputText @bind-Value="loginID" class="form-control" autocomplete="username" />

            </div>

            <div>
                <label>Password:</label>
                <InputText @bind-Value="Password" type="password" class="form-control" autocomplete="current-password" />

            </div>

            <button class="login-button" @onclick="OnLoginClicked">Login</button>

            <p style="color: red">@ErrorMessage</p>
        </EditForm>
    </div>


@code {
    private string loginID = "";
    private string Password = "";
    private string ErrorMessage = "";
    private string? imageSource;
    private bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        string currentUrl = Navigation.Uri;
        Console.WriteLine($"[DEBUG] Login Page Loaded at: {currentUrl}");
        isLoggedIn = await AuthService.IsLoggedInAsync();
        if (isLoggedIn)
        {
            Console.WriteLine("[DEBUG] User already logged in. Redirecting to /Home...");
            Navigation.NavigateTo("/Home", true);
            return; // ✅ Stops further execution
        }

        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("alanjay.png");
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            byte[] imageBytes = memoryStream.ToArray();

            imageSource = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
        catch (Exception)
        {
            Console.WriteLine("Error loading image.");
        }
    }


    private async Task OnLoginClicked()
    {
        Console.WriteLine("Login button clicked"); // ✅ Debug log to confirm function runs

        var result = await AuthService.LoginAsync(loginID, Password);
        if (result != null)
        {
            Console.WriteLine($"User authenticated: {result.loginID}"); // ✅ Debug log username

            await AuthStateProvider.SetLoggedInAsync(result); // ✅ Use AuthStateProvider
            await JS.InvokeVoidAsync("console.log", "[DEBUG] Entered GrantDatabaseAccessAsync()");

            await GrantDatabaseAccessAsync();

            Navigation.NavigateTo("/Home");
        }
        else
        {
            Console.WriteLine("Login failed"); // ✅ Debug login failure
            ErrorMessage = "Invalid credentials.";
        }
    }
    private string firewallStatus = "";

    private async Task GrantDatabaseAccessAsync()
    {
        await JS.InvokeVoidAsync("console.log", "[DEBUG] Entered GrantDatabaseAccessAsync()");

        try
        {
            var ip = await Http.GetStringAsync("https://api.ipify.org");
            var url = $"https://firewallsqlfunction.azurewebsites.net/api/AddFirewallRule?code=UGInsL_eeNFdZzWcPER-ajsLHoYPb5WXJRHKPNBSnM5LAzFub5lM4g==&ip={ip}";
            var response = await Http.PostAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var firewallStatus = $"✅ Firewall rule applied. Response: {result}";
                await JS.InvokeVoidAsync("console.log", firewallStatus);
            }
            else
            {
                var error = $"❌ Firewall function failed: {response.StatusCode}";
                await JS.InvokeVoidAsync("console.log", error);
            }
        }
        catch (Exception ex)
        {
            var error = $"❌ Exception while calling firewall function: {ex.Message}";
            await JS.InvokeVoidAsync("console.log", error);
        }
    }







    private class UserData
    {
        public string loginID { get; set; } = string.Empty;
        public int EmployeeID { get; set; }
    }
}
