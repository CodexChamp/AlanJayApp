@namespace AlanJayApp.Components.Pages
@page "/vinnumscan"
@using System.Linq
@using System.Threading
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using AlanJayApp.Data
@using AlanJayApp.Services
@using Azure.Storage.Blobs
@inject BlobServiceClient BlobClient

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@inject CarService CarService
@implements IDisposable


<div class="container" id="vinContainer" style="background-color:@ContainerColor">
    <!-- VIN Input -->
    <div class="input-section">
        <div class="input-buttons">
            <button @onclick="ClearVin" class="btn btn-secondary" disabled="@IsBusy">Clear</button>
            <input @bind="VinInput"
                   @oninput="OnVinInput"
                   class="input-field"
                   style="text-transform: uppercase;"
                   placeholder="Enter or Scan VIN..."
                   @onfocus="ShowSuggestions"
                   @onblur="HideSuggestionsAfterDelay" />
            <button @onclick="TriggerNativeScanner" class="btn btn-primary" disabled="@IsBusy">
                <img src="Images/qrcode.png" alt="QR Code" class="qr-icon" />
            </button>
        </div>
        <div class="suggestions-container" id="vinDropdown" style="display:@(ShowVinDropdown ? "block" : "none")">
            @foreach (var suggestion in VinSuggestions)
            {
                <div @onclick="() => SelectVinSuggestion(suggestion)" class="suggestion-item">
                    @suggestion
                </div>
            }
        </div>
    </div>

    <!-- Vehicle Details -->
    @if (VehicleDetails != null)
    {
        <div id="vehicleDetails" style="margin-top:15px;">
            <p>Quote ID: <strong>@VehicleDetails.QuoteID</strong></p>
            <p>Agency: <strong>@VehicleDetails.Agency</strong></p>
            <p>Description: <strong>@VehicleDetails.VmodelDesc</strong></p>
            <p>Color: <strong>@VehicleDetails.Color</strong></p>
            <p>Year: <strong>@VehicleDetails.Vyear</strong></p>
            <p>Make: <strong>@VehicleDetails.Vmake</strong></p>

            <div class="form-group">
                <label>Key Code:</label>
                <InputText @bind-Value="EnteredKeyCode" class="form-control d-inline-block" style="width:120px;" disabled="@IsBusy" />
                @if (!IsBusy && KeyCodeChanged)
                {
                    <span style="color:green; margin-left:5px;">✓</span>
                }
            </div>

            <div class="form-group">
                <label>Location:</label>
                <select @onchange="OnLocationChanged"
                        value="@EnteredLocation"
                        class="form-control d-inline-block"
                        style="width:150px;" disabled="@IsBusy">
                    <option value="RANCH">RANCH</option>
                    @foreach (var loc in LocationOptions.Where(x => "RANCH" != x))
                    {
                        <option value="@loc">@loc</option>
                    }
                    <option value="__CLEAR__" style="color:red">Clear</option>
                </select>

                @if (!IsBusy && LocationChanged)
                {
                    <span style="color:green;margin-left:5px">✓</span>
                }
            </div>

            <div class="form-group">
                <label>Damage Note:</label>
                <textarea @bind="DamageDescription"
                          class="form-control"
                          placeholder="Describe any damage or issues..."
                          maxlength="250"
                          @oninput="OnDamageInput"
                          style="resize:vertical;" disabled="@IsBusy"></textarea>
            </div>

            <div class="action-buttons">
                @if (CanSave)
                {
                    <button class="btn btn-primary me-2" @onclick="QueueSaveAsync" disabled="@IsBusy">Save</button>
                }
                <button class="btn btn-secondary me-2" @onclick="QueueSaveKeyTagAsync" disabled="@IsBusy">KeyTag</button>
                <button class="btn btn-info" @onclick="OpenWindowSticker" disabled="@IsBusy">Window Sticker</button>

                @if (IsBusy)
                {
                    <span class="spinner-border spinner-border-sm text-primary ms-2"></span>
                }
                else if (!string.IsNullOrEmpty(SaveStatus))
                {
                    <span style="margin-left:10px; color:@SaveStatusColor;">@SaveStatus</span>
                }
            </div>
        </div>
    }  
</div>
@code {
    // State
    private string VinInput { get; set; } = string.Empty;
    private List<string> VinSuggestions { get; set; } = new();
    private bool ShowVinDropdown { get; set; }
    private VehicleInfo? VehicleDetails { get; set; }
    private List<string> LocationOptions { get; set; } = new();
    private string OriginalKeyCode { get; set; } = string.Empty;
    private string EnteredKeyCode  { get; set; } = string.Empty;
    private string OriginalLocation{ get; set; } = string.Empty;
    private string EnteredLocation  { get; set; } = string.Empty;
    private string OriginalDamage   { get; set; } = string.Empty;
    private string DamageDescription{ get; set; } = string.Empty;
    private string SaveStatus       { get; set; } = string.Empty;
    private bool IsBusy { get; set; } = false;
    private readonly Queue<Func<Task>> _actionQueue = new();
    private bool _isRunningQueue = false;

    // Computed
    private bool KeyCodeChanged     => EnteredKeyCode.Trim()  != OriginalKeyCode.Trim();
    private bool LocationChanged    => EnteredLocation.Trim() != OriginalLocation.Trim();
    private bool DamageChanged      => DamageDescription.Trim() != OriginalDamage.Trim();
    private bool CanSave            => KeyCodeChanged || LocationChanged || DamageChanged;
    private string SaveStatusColor  => SaveStatus.Contains("✓") ? "green" : SaveStatus == "Error" ? "red" : "black";
    private string ContainerColor   => VehicleDetails?.Location == "NA" ? "#d3d3d3" : "#e6f9e6";
    private async Task QueueSaveAsync() => await EnqueueAsync(SaveAsync);
    private async Task QueueSaveKeyTagAsync() => await EnqueueAsync(SaveKeyTagAsync);
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to scanner if needed
        VinScannerService.OnBarcodeScanned += HandleVinScanned;

        // Restore last VIN
        VinInput = (await JS.InvokeAsync<string>("localStorage.getItem", "savedVIN"))?.Trim() ?? string.Empty;
        if (!string.IsNullOrEmpty(VinInput))
            await ProcessVinAsync();
    }

    // Input handlers
    private async Task OnVinInput(ChangeEventArgs e)
    {
        VinInput = (e.Value?.ToString() ?? string.Empty).ToUpper().Trim();
        await JS.InvokeVoidAsync("localStorage.setItem", "savedVIN", VinInput);
        await FetchVinSuggestions();
    }
    private async Task OnVinKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await ProcessVinAsync();
    }
    private void ShowSuggestions() => ShowVinDropdown = VinSuggestions.Any();
    private async Task HideSuggestionsAfterDelay()
    {
        await Task.Delay(200);
        ShowVinDropdown = false;
        StateHasChanged();
    }
    private void OnDamageInput(ChangeEventArgs e) => DamageDescription = e.Value?.ToString() ?? string.Empty;

    // Fetch suggestions
    private async Task FetchVinSuggestions()
    {
        if (string.IsNullOrWhiteSpace(VinInput) || VinInput.Length < 4) return;

        // ✅ Cancel previous requests
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            VinSuggestions.Clear(); // Clear previous suggestions before adding new ones

            var suggestions = await Http.GetFromJsonAsync<List<string>>($"/api/vin/suggestions?query={VinInput}", token);

            if (token.IsCancellationRequested) return; // ✅ Skip if request was canceled

            // ✅ Only show suggestions if more than 3 results
            if (suggestions != null)
            {
                VinSuggestions = new List<string>(suggestions);
                ShowVinDropdown = true;
            }
            else
            {
                ShowVinDropdown = false; // ✅ Hide dropdown if <= 3 suggestions
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("[DEBUG] FetchVinSuggestions request was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] FetchVinSuggestions failed: {ex.Message}");
        }
    }
    private async Task SelectVinSuggestion(string vin)
    {
        VinInput = vin;
        ShowVinDropdown = false;
        await JS.InvokeVoidAsync("localStorage.setItem", "savedVIN", VinInput);
        await ProcessVinAsync();
    }

    // Core fetch
    private async Task ProcessVinAsync()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "savedVIN", VinInput);
        var formatted = VinInput.Replace("-", "").Trim();
        VehicleDetails = await (from v in DbContext.AzVehicles
                                join q in DbContext.AzQuoteSummary on v.QuoteID equals q.QuoteID into qj
                                from q in qj.DefaultIfEmpty()
                                join a in DbContext.AzAgency on q.Agency_Contact equals a.AgencyContactID into aj
                                from a in aj.DefaultIfEmpty()
                                where v.VIN.Replace("-", "").Trim() == formatted
                                select new VehicleInfo
                                {
                                    VehicleID = v.VehicleID,
                                    QuoteID   = v.QuoteID,
                                    Agency = a != null ? a.Agency : "NA",
                                    VmodelDesc= v.ModDesc ?? "NA",
                                    Color     = v.Color ?? "Unknown",
                                    Vyear     = v.Vyear ?? "Unknown",
                                    Vmake     = v.Vmake ?? "Unknown",
                                    Location  = v.Location ?? "NA",
                                    KeyCode   = v.KeyCode ?? "NA"
                                }).FirstOrDefaultAsync();
        if (VehicleDetails != null)
        {
            // initialize fields
            OriginalKeyCode = EnteredKeyCode = VehicleDetails.KeyCode == "NA" ? "" : VehicleDetails.KeyCode;
            OriginalLocation = EnteredLocation = VehicleDetails.Location ?? "";
            OriginalDamage = DamageDescription = "";

            await LoadLocationOptions(VehicleDetails.VehicleID);
        }
        StateHasChanged();
    }

    private async Task SaveKeyTagAsync()
    {
        try
        {
            var vin = VinInput;
            DetachIfTracked(vin);
            var entry = new VehiclesScanned
                {
                    VIN = vin,
                    vehicleID = VehicleDetails!.VehicleID,
                    damagedInTransit = !string.IsNullOrEmpty(DamageDescription),
                    note = DamageDescription ?? "",
                    location = EnteredLocation,
                    KeyCode = EnteredKeyCode ?? "",
                    locationChanged = false,
                    keyCodeChanged = false
                };
            DbContext.VehiclesScanned.Add(entry);

            await DbContext.SaveChangesAsync();
            SaveStatus = "KeyTag ✓";
        }
        catch (Exception ex)
        {
            // show the actual SQL or constraint error
            SaveStatus = $"Error: {ex.InnerException?.Message ?? ex.Message}";
        }

        StateHasChanged();
        await Task.Delay(2000);

        // reload the record (and clear status)
        await ProcessVinAsync();
        SaveStatus = string.Empty;
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        IsBusy = true;               // Show spinner
        SaveStatus = "";             // Hide status until done
        StateHasChanged();

        try
        {
            var vin = VinInput;
            DetachIfTracked(vin);

            var entry = new VehiclesScanned
                {
                    VIN = vin,
                    vehicleID = VehicleDetails!.VehicleID,
                    damagedInTransit = !string.IsNullOrEmpty(DamageDescription),
                    note = DamageDescription,
                    location = EnteredLocation,
                    KeyCode = EnteredKeyCode,
                    locationChanged = LocationChanged,
                    keyCodeChanged = KeyCodeChanged
                };
            DbContext.VehiclesScanned.Add(entry);

            var master = new AzVehicles { VehicleID = VehicleDetails.VehicleID };
            DbContext.AzVehicles.Attach(master);
            master.Location = EnteredLocation;
            master.KeyCode = EnteredKeyCode;
            DbContext.Entry(master).Property(x => x.Location).IsModified = true;
            DbContext.Entry(master).Property(x => x.KeyCode).IsModified = true;

            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            SaveStatus = $"Error: {ex.InnerException?.Message ?? ex.Message}";
        }

        IsBusy = false;             // Hide spinner
        SaveStatus = "Saved ✓";     // ✅ Now show green check
        StateHasChanged();

        await Task.Delay(2000);     // Show message for a moment
        SaveStatus = "";
        StateHasChanged();
    }

    // Helpers
    private Task ClearVin()
    {
        VinInput = string.Empty;
        VehicleDetails = null;
        VinSuggestions.Clear();
        ShowVinDropdown = false;
        return JS.InvokeVoidAsync("localStorage.removeItem", "savedVIN").AsTask();
    }
    private void OpenWindowSticker() => Navigation.NavigateTo($"/windowsticker?vin={VinInput}");
    private async Task TriggerNativeScanner() => await App.Current.MainPage.Navigation.PushAsync(new VinNumScanPage(BlobClient, VinInput));
    private void DetachIfTracked(string vin)
    {
        var tracked = DbContext.ChangeTracker.Entries<VehiclesScanned>().FirstOrDefault(e => e.Entity.VIN == vin);
        if (tracked != null) DbContext.Entry(tracked.Entity).State = EntityState.Detached;
    }
    private async void HandleVinScanned(string scannedVin)
    {
        VinInput = scannedVin;
        await ProcessVinAsync();
    }
    public void Dispose() => VinScannerService.OnBarcodeScanned -= HandleVinScanned;
    // ★ loads Ranch + vendor locations directly via EF ★
    private async Task LoadLocationOptions(int vehicleId)
    {
        // ranch first
        var ranchLoc = await DbContext.AzVendors
            .Where(v => v.VendorID == 3)
            .Select(v => v.Location)
            .Distinct()
            .SingleOrDefaultAsync(); 

        // any other POs’ vendor locations
        var poLocs = await (
            from veh in DbContext.AzVehicles
            join po in DbContext.AzPOs on veh.QuoteID equals po.QuoteID
            join vend in DbContext.AzVendors on po.VendorID equals vend.VendorID
            where veh.VehicleID == vehicleId && vend.VendorID != 3
            select vend.Location
        )
        .Distinct()
        .ToListAsync();

        var all = new List<string>();
        if (!string.IsNullOrEmpty(ranchLoc))
            all.Add(ranchLoc);

        all.AddRange(poLocs
            .Where(x => x != ranchLoc)
            .OrderBy(x => x)
        );

        LocationOptions = all;

        // no more “dirty” immediately after load
        OriginalLocation = EnteredLocation;
        await InvokeAsync(StateHasChanged);
    }

    // ------------- change handler ----------
    private void OnLocationChanged(ChangeEventArgs e)
    {
        var v = e.Value?.ToString() ?? "";

        // if they clicked “Clear”, reset to truly blank:
        if (v == "__CLEAR__")
            EnteredLocation = "";
        else
            EnteredLocation = v;
    }
    private async Task EnqueueAsync(Func<Task> action)
    {
        _actionQueue.Enqueue(action);
        if (!_isRunningQueue)
        {
            _isRunningQueue = true;
            IsBusy = true;
            SaveStatus = string.Empty;
            StateHasChanged();

            while (_actionQueue.TryDequeue(out var next))
            {
                try { await next(); } catch (Exception ex) { Console.WriteLine(ex.Message); }
            }

            IsBusy = false;
            _isRunningQueue = false;
            StateHasChanged();
        }
    }
    private class VehicleInfo
    {
        public int VehicleID { get; set; }
        public int? QuoteID { get; set; }
        public string? Agency { get; set; }
        public string? VmodelDesc { get; set; }
        public string? Color { get; set; }
        public string? Vyear { get; set; }
        public string? Vmake { get; set; }
        public string? Location { get; set; }
        public string? KeyCode { get; set; }
    }
}
